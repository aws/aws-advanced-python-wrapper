#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


AuroraHostListPlugin.ProviderAlreadySet=[AuroraHostListPlugin]Another dynamic host list provider has already been set: {}.

AuroraHostListProvider.ClusterInstanceHostPatternNotSupportedForRDSCustom=[AuroraHostListProvider] An RDS Custom url can't be used as the 'clusterInstanceHostPattern' configuration setting.
AuroraHostListProvider.ClusterInstanceHostPatternNotSupportedForRDSProxy=[AuroraHostListProvider] An RDS Proxy url can't be used as the 'clusterInstanceHostPattern' configuration setting.
AuroraHostListProvider.ClusterInstanceHostPatternRequired=[AuroraHostListProvider] The 'clusterInstanceHostPattern' configuration property is required when an IP address or custom domain is used to connect to a cluster that provides topology information. If you would instead like to connect without failover functionality, set the 'enableClusterAwareFailover' configuration property to false.
AuroraHostListProvider.ErrorGettingHostRole=[AuroraHostListProvider] An error occurred while obtaining the connected host's role. This could occur if the connection is broken or if you are not connected to an Aurora database.
AuroraHostListProvider.ErrorGettingNetworkTimeout=[AuroraHostListProvider] An error occurred while getting the connection network timeout: {}
AuroraHostListProvider.ErrorIdentifyConnection=[AuroraHostListProvider] An error occurred while obtaining the connection's host ID.
AuroraHostListProvider.InvalidDialect=[AuroraHostListProvider] The driver expected a dialect that supports topology queries but the detected dialect does not support topology queries.
AuroraHostListProvider.InvalidDialectForGetHostRole=[AuroraHostListProvider] An Aurora dialect is required to analyze a host's role. The detected dialect was '{}'
AuroraHostListProvider.InvalidDialectForIdentifyConnection=[AuroraHostListProvider] An Aurora dialect is required to analyze the instance associated with this connection. The detected dialect was '{}'
AuroraHostListProvider.InvalidPattern=[AuroraHostListProvider] Invalid value for the 'clusterInstanceHostPattern' configuration setting - the host pattern must contain a '?' character as a placeholder for the DB instance identifiers of the instances in the cluster.
AuroraHostListProvider.InvalidQuery=[AuroraHostListProvider] Error obtaining host list. Provided database might not be an Aurora Db cluster
AuroraHostListProvider.InvalidTopology=[AuroraHostListProvider] The topology query returned an invalid topology - no writer instance detected.
AuroraHostListProvider.ParsedListEmpty=[AuroraHostListProvider] Can't parse connection string: '{}'
AuroraHostListProvider.SuggestedClusterId=[AuroraHostListProvider] ClusterId '{}' is suggested for url '{}'.
AuroraHostListProvider.TopologyTimeout=[AuroraHostListProvider] Could not retrieve host list - the topology query timed out.
AuroraHostListProvider.UninitializedClusterInstanceTemplate=[AuroraHostListProvider] The driver was unable to build a topology object because the cluster instance template was never initialized.
AuroraHostListProvider.UninitializedInitialHostInfo=[AuroraHostListProvider] The driver was unable to build a topology object because the initial host info was never initialized.

AuroraPgDialect.HasExtensionsTrue=[AuroraPgDialect] has_extensions: True
AuroraPgDialect.HasTopologyTrue=[AuroraPgDialect] has_topology: True

AuroraTestUtility.FailoverRequestNotSuccessful=[AuroraTestUtility] Failover cluster request was not successful.
AuroraTestUtility.ClusterMemberNotFound=[AuroraTestUtility] Cannot find cluster member whose db instance identifier is '{}'.
AuroraTestUtility.WriterInstanceNotFound=[AuroraTestUtility] Cannot find writer instance for cluster '{}'.
AuroraTestUtility.DetectedEngineInvalid=[AuroraTestUtility] create_user was called but the detected engine is not valid: '{}'.

AwsSdk.UnsupportedRegion=[AwsSdk] Unsupported AWS region {}. For supported regions please read https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html

AwsSecretsManagerPlugin.ConnectException=[AwsSecretsManagerPlugin] Error occurred while opening a connection: {}
AwsSecretsManagerPlugin.FailedLogin=[AwsSecretsManagerPlugin] Login failed. Error={}
AwsSecretsManagerPlugin.FailedToFetchDbCredentials=[AwsSecretsManagerPlugin] Was not able to either fetch or read the database credentials from AWS Secrets Manager. Ensure the correct secretId and region properties have been provided.
AwsSecretsManagerPlugin.MissingRequiredConfigParameter=[AwsSecretsManagerPlugin] Configuration parameter {} is required.
AwsSecretsManagerPlugin.UnhandledException=[AwsSecretsManagerPlugin] Unhandled exception: {}

ConnectionProvider.UnsupportedHostSelectorStrategy=[ConnectionProvider] Unsupported host selection strategy '{}' specified for this connection provider '{}'. Please visit the documentation for all supported strategies.

ConnectionStringHostListProvider.ErrorDoesNotSupportHostRole = [ConnectionStringHostListProvider] ConnectionStringHostListProvider does not support get_host_role
ConnectionStringHostListProvider.ErrorDoesNotSupportIdentifyConnection = [ConnectionStringHostListProvider] ConnectionStringHostListProvider does not support identify_connection. If this method is called and you are using an Aurora database, please ensure you load the 'auroraHostList' plugin to inform the driver that an Aurora cluster is being used.`

ConnectionWrapper.ConnectionNotOpen=[ConnectionWrapper] Initial connection isn't open.

DefaultPlugin.EmptyHosts=[DefaultPlugin] The default connection plugin received an empty host list from the plugin service.
DefaultPlugin.UnknownHosts=[DefaultPlugin] A HostInfo with the role of HostRole.UNKNOWN was requested via get_host_info_by_strategy. The requested role must be either HostRole.WRITER or HostRole.READER.

DialectCode.InvalidStringValue=[DialectCode] '{}' could not be converted to a DialectCode because it is not a valid DialectCode value. If you are using the 'wrapper_dialect' connection property, please ensure you are setting it to a valid DialectCode value. 

DialectManager.CurrentDialectCanUpdate=[DialectManager] Current dialect: {}, {}, can_update: {}
DialectManager.UnknownDialect=[DialectManager] The database dialect could not be identified. Please use the 'wrapper_dialect' configuration parameter to configure it.
DialectManager.UnknownDialectCode=[DialectManager] Unknown dialect code: '{}'.

DriverConnectionProvider.ConnectingToHost=[DriverConnectionProvider] Connecting to '{}' with properties: '{}'
DriverConnectionProvider.UnsupportedStrategy=[DriverConnectionProvider] DriverConnectionProvider does not support strategy: {}

FailoverPlugin.ConnectionChangedError=[Failover] The active SQL connection has changed due to a connection failure. Please re-configure session state if required.
FailoverPlugin.ConnectionToHostFailed=[Failover] Connection to '{}' host '{}' failed.
FailoverPlugin.DetectedException=[Failover] Detected an exception while executing a command: {}
FailoverPlugin.EstablishedConnection=[Failover] Connected to: {}
FailoverPlugin.FailoverDisabled=[Failover] Cluster-aware failover is disabled.
FailoverPlugin.InvalidNode=[Failover] Node is no longer available in the topology: {}
FailoverPlugin.NoOperationsAfterConnectionClosed=[Failover] No operations allowed after connection closed.
FailoverPlugin.ParameterValue=[Failover] {}={}
FailoverPlugin.StartReaderFailover=[Failover] Starting reader failover procedure.
FailoverPlugin.StartWriterFailover=[Failover] Starting writer failover procedure.
FailoverPlugin.TransactionResolutionUnknownError=[Failover] Transaction resolution unknown. Please re-configure session state if required and try restarting the transaction.
FailoverPlugin.UnableToConnectToReader=[Failover] Unable to establish SQL connection to the reader instance.
FailoverPlugin.UnableToConnectToWriter=[Failover] Unable to establish SQL connection to the writer instance.

HostMonitoringPlugin.ActivatedMonitoring=[HostMonitoringPlugin] Executing method '{}', monitoring is activated.
HostMonitoringPlugin.ClusterEndpointHostInfo=[HostMonitoringPlugin] The HostInfo to monitor is associated with a cluster endpoint. The plugin will attempt to identify the connected database instance.
HostMonitoringPlugin.ErrorIdentifyingConnection=[HostMonitoringPlugin] An error occurred while identifying the connection database instance: '{}'.
HostMonitoringPlugin.MonitoringDeactivated=[HostMonitoringPlugin] Monitoring deactivated for method '{}'.
HostMonitoringPlugin.NullConnection=[HostMonitoringPlugin] Attempted to execute method '{}' but the current connection is None.
HostMonitoringPlugin.NullHostInfo=[HostMonitoringPlugin] Could not find HostInfo to monitor for the current connection.
HostMonitoringPlugin.NullHostInfoForMethod=[HostMonitoringPlugin] Attempted to execute method '{}' but the current host info is None.
HostMonitoringPlugin.UnableToIdentifyConnection=[HostMonitoringPlugin] Unable to identify the connected database instance: '{}', please ensure the correct host list provider is specified. The host list provider in use is: '{}'.
HostMonitoringPlugin.UnavailableHost=[HostMonitoringPlugin] Host '{}' is unavailable.

HostSelector.NoEligibleHost=[HostSelector] No Eligible Hosts Found.
HostSelector.NoHostsMatchingRole=[HostSelector] No hosts were found matching the requested role: '{}'.

IamAuthPlugin.ConnectException=[IamAuthPlugin] Error occurred while opening a connection: {}
IamAuthPlugin.GeneratedNewIamToken=[IamAuthPlugin] Generated new IAM token = {}
IamAuthPlugin.InvalidPort=[IamAuthPlugin] Port number: {} is not valid. Port number should be greater than zero. Falling back to default port.
IamAuthPlugin.UnhandledException=[IamAuthPlugin] Unhandled exception: {}
IamAuthPlugin.UnsupportedHostname=[IamAuthPlugin] Unsupported AWS hostname {}. Amazon domain name in format *.AWS-Region.rds.amazonaws.com or *.rds.AWS-Region.amazonaws.com.cn is expected.
IamAuthPlugin.UseCachedIamToken=[IamAuthPlugin] Used cached IAM token = {}

IamPlugin.IsNullOrEmpty=[IamPlugin] Property "{}" is null or empty.

Monitor.NullContext=[Monitor] Parameter 'context' should not evaluate to None.
Monitor.NullDialect=[Monitor] The host monitoring plugin tried to check the connection status but was unable to identify the target driver dialect.
Monitor.OpenedMonitorConnection=[Monitor] Opened a monitoring connection to '{}'.
Monitor.OpeningMonitorConnection=[Monitor] Opening a monitoring connection to '{}'.

MonitorContext.ExceptionAbortingConnection=[MonitorContext] An exception occurred while attempting to abort the monitored connection: '{}'.
MonitorContext.HostAvailable=[MonitorContext] Host '{}' is *available*.
MonitorContext.HostNotResponding=[MonitorContext] Host '{}' is not *responding* - failure count: '{}'.
MonitorContext.HostUnavailable=[MonitorContext] Host '{}' is *unavailable*.

MonitoringThreadContainer.EmptyNodeKeys=[MonitorThreadContainer] The provided host_aliases set was empty.
MonitoringThreadContainer.ErrorGettingMonitor=[MonitorThreadContainer] Unable to find or create monitor for host with aliases '{}'.
MonitoringThreadContainer.NullMonitorReturnedFromSupplier=[MonitorThreadContainer] The monitor supplier passed into get_or_create_monitor returned None.

MonitorService.EmptyAliasSet=[MonitorService] Empty alias set passed for '{}'. The alias set should not be empty.
MonitorService.ErrorPopulatingAliases=[MonitorService] An error occurred while populating aliases: '{}'.
MonitorService.NullDialect=[MonitorService] The host monitoring plugin tried to monitor the connection but was unable to identify the target driver dialect.

OpenedConnectionTracker.OpenedConnectionsTracked=[OpenedConnectionTracker] Opened Connections Tracked: {}
OpenedConnectionTracker.InvalidatingConnections=[OpenedConnectionTracker] Invalidating opened connections to host: {}
OpenedConnectionTracker.UnableToPopulateOpenedConnectionSet=[OpenedConnectionTracker] The driver is unable to track this opened connection because the instance endpoint is unknown.

PgTargetDriverDialect.SetReadOnlyOnNullConnection=[PgTargetDriverDialect] Attempted to set the read only value on a pooled connection, but no underlying driver connection was found. This can happen if there is an attempt to set the read only value for a pooled connection that has previously been closed.

Plugin.UnsupportedMethod=[Plugin] '{}' is not supported by this plugin.

PluginManager.InvalidPlugin=[PluginManager] Invalid plugin requested: '{}'.
PluginManager.MethodInvokedAgainstOldConnection = [PluginManager] The internal connection has changed since '{}' was created. This is likely due to failover or read-write splitting functionality. To ensure you are using the updated connection, please re-create Cursor objects after failover and/or setting readonly.
PluginManager.NullPipeline=[PluginManager] A pipeline was requested but the created pipeline evaluated to None.

PluginServiceImpl.FailedToRetrieveHostPort=[PluginServiceImpl] Could not retrieve Host:Port for connection. {}
PluginServiceImpl.NonEmptyAliases=[PluginServiceImpl] fill_aliases called when HostInfo already contains the following aliases: {}.
PluginServiceImpl.UnableToUpdateTransactionStatus=[PluginServiceImpl] Unable to update transaction status, current connection is None.
PluginServiceImpl.UpdateDialectNullConnection=[PluginServiceImpl] The plugin service attempted to update the current dialect but could not identify a connection to use.

PropertiesUtils.NoHostDefined=[PropertiesUtils] PropertiesUtils.get_url was called but no host was defined in the properties. Please ensure you pass in a 'host' parameter when connecting.

RdsPgDialect.RdsToolsAuroraUtils=[RdsPgDialect] rds_tools: {}, aurora_utils: {}

ReaderFailoverHandler.AttemptingReaderConnection=[ReaderFailoverHandler] Trying to connect to reader: '{}', with properties '{}'
ReaderFailoverHandler.FailedReaderConnection=[ReaderFailoverHandler] Failed to connect to reader: '{}'
ReaderFailoverHandler.InvalidTopology=[ReaderFailoverHandler] '{}' was called with an invalid (null or empty) topology.
ReaderFailoverHandler.SuccessfulReaderConnection=[ReaderFailoverHandler] Connected to reader: '{}'

ReadWriteSplittingPlugin.ClosingInternalConnections=[ReadWriteSplittingPlugin] Closing all internal connections except for the current one.
ReadWriteSplittingPlugin.EmptyHostList=[ReadWriteSplittingPlugin] Host list is empty.
ReadWriteSplittingPlugin.ErrorSwitchingToCachedReader=[ReadWriteSplittingPlugin] An error occurred while trying to switch to a cached reader connection: '{}'. The driver will attempt to establish a new reader connection.
ReadWriteSplittingPlugin.ErrorSwitchingToReader=[ReadWriteSplittingPlugin] An error occurred while trying to switch to a reader connection.
ReadWriteSplittingPlugin.ErrorSwitchingToWriter=[ReadWriteSplittingPlugin] An error occurred while trying to switch to a writer connection.
ReadWriteSplittingPlugin.ErrorVerifyingInitialHostSpecRole=[ReadWriteSplittingPlugin] An error occurred while obtaining the connected host's role. This could occur if the connection is broken or if you are not connected to an Aurora database.
ReadWriteSplittingPlugin.ExceptionWhileExecutingCommand=[ReadWriteSplittingPlugin] Detected an exception while executing a command: '{}'
ReadWriteSplittingPlugin.ExecutingAgainstOldConnection=[ReadWriteSplittingPlugin] Executing method against old connection: '{}'
ReadWriteSplittingPlugin.FailedToConnectToReader=[ReadWriteSplittingPlugin] Failed to connect to reader host: '{}'
ReadWriteSplittingPlugin.FailoverExceptionWhileExecutingCommand=[ReadWriteSplittingPlugin] Detected a failover exception while executing a command: '{}'
ReadWriteSplittingPlugin.FallbackToWriter=[ReadWriteSplittingPlugin] Failed to switch to a reader; the current writer will be used as a fallback: '{}'
ReadWriteSplittingPlugin.NoReadersAvailable=[ReadWriteSplittingPlugin] The plugin was unable to establish a reader connection to any reader instance.
ReadWriteSplittingPlugin.NoReadersFound=[ReadWriteSplittingPlugin] A reader instance was requested via set_read_only, but there are no readers in the host list. The current writer will be used as a fallback: '{}'
ReadWriteSplittingPlugin.NoWriterFound=[ReadWriteSplittingPlugin] No writer was found in the current host list.
ReadWriteSplittingPlugin.SetReaderConnection=[ReadWriteSplittingPlugin] Reader connection set to '{}'
ReadWriteSplittingPlugin.SetReadOnlyFalseInTransaction=[ReadWriteSplittingPlugin] set_read_only(false) was called on a read-only connection inside a transaction. Please complete the transaction before calling set_read_only(false).
ReadWriteSplittingPlugin.SetReadOnlyOnClosedConnection=[ReadWriteSplittingPlugin] set_read_only cannot be called on a closed connection.
ReadWriteSplittingPlugin.SettingCurrentConnection=[ReadWriteSplittingPlugin] Setting the current connection to '{}'
ReadWriteSplittingPlugin.SetWriterConnection=[ReadWriteSplittingPlugin] Writer connection set to '{}'
ReadWriteSplittingPlugin.SuccessfullyConnectedToReader=[ReadWriteSplittingPlugin] Successfully connected to a new reader host: '{}'
ReadWriteSplittingPlugin.SwitchedFromReaderToWriter=[ReadWriteSplittingPlugin] Switched from a reader to a writer host. New writer host: '{}'
ReadWriteSplittingPlugin.SwitchedFromWriterToReader=[ReadWriteSplittingPlugin] Switched from a writer to a reader host. New reader host: '{}'
ReadWriteSplittingPlugin.UnavailableHostInfo=[ReadWriteSplittingPlugin] Current Host Info could not be found in plugin service.
ReadWriteSplittingPlugin.UnsupportedHostSpecSelectorStrategy=[ReadWriteSplittingPlugin] Unsupported host selection strategy '{}' specified in plugin configuration parameter 'readerHostSelectorStrategy'. Please visit the Read/Write Splitting Plugin documentation for all supported strategies.

SqlAlchemyPooledConnectionProvider.NullPool=[SqlAlchemyPooledConnectionProvider] Attempted to find or create a pool for '{}' but the result of the attempt evaluated to None.
SqlAlchemyPooledConnectionProvider.UnableToCreateDefaultKey=[SqlAlchemyPooledConnectionProvider] Unable to create a default key for internal connection pools. By default, the user parameter is used, but the given user evaluated to None or the empty string (""). Please ensure you have passed a valid user in the connection properties.

StaleDnsHelper.ClusterEndpointDns=[StaleDnsPlugin] Cluster endpoint {} resolves to {}.
StaleDnsHelper.Reset=[StaleDnsPlugin] Reset stored writer host.
StaleDnsHelper.StaleDnsDetected=[StaleDnsPlugin] Stale DNS data detected. Opening a connection to '{}'.
StaleDnsHelper.WriterHostSpec=[StaleDnsPlugin] Writer host: {}
StaleDnsHelper.WriterInetAddress=[StaleDnsPlugin] Writer host address: {}

StaleDnsPlugin.RequireDynamicProvider=[StaleDnsPlugin] A dynamic host list provider is required for the stale DNS plugin, but the detected host list was a static provider.

TargetDriverDialect.InvalidTargetAttribute=[TargetDriverDialect] [{}] Could not find a valid target connection attribute for the '{}' method
TargetDriverDialect.UnsupportedOperationError=[TargetDriverDialect] target driver '{}' dialect doesn't support '{}'.

TargetDriverDialectManager.CustomDialectNotSupported=[TargetDriverDialectManager] Provided custom target driver dialect will be ignored.
TargetDriverDialectManager.UnexpectedClass=[TargetDriverDialectManager] Unexpected DataSource class. Expected class: {}, actual class: {}.
TargetDriverDialectManager.UnknownDialectCode=[TargetDriverDialectManager] Unknown target driver dialect code: {}.
TargetDriverDialectManager.UseDialect=[TargetDriverDialectManager] Target driver dialect set to: {}, {}.

Testing.CantParse=[Testing] Can't parse {}.
Testing.EnvVarRequired=[Testing] Environment variable {} is required.
Testing.InstanceNotFound=[Testing] Instance {} not found.
Testing.ProxyNotFound=[Testing] Proxy for {} is not found.
Testing.RequiredTestDriver=[Testing] testDriver is required.

UnknownDialect.AbortConnection=[UnknownDialect] abort_connection was called, but the database dialect is unknown. A valid database dialect must be detected in order to abort a connection.

Wrapper.ConnectMethod=[Wrapper] Target driver should be a target driver's connect() method/function.
Wrapper.RequiredTargetDriver=[Wrapper] Target driver is required.
Wrapper.UnsupportedAttribute=[Wrapper] Target driver does not have the attribute: '{}'

WriterFailoverHandler.AlreadyWriter=[WriterFailoverHandler] Current reader connection is actually a new writer connection.
WriterFailoverHandler.CurrentTopologyNone=[WriterFailoverHandler] Current topology cannot be None.
WriterFailoverHandler.FailedToConnectToWriterInstance=[WriterFailoverHandler] Failed to connect to the writer instance.
WriterFailoverHandler.FailoverCalledWithInvalidTopology=[WriterFailoverHandler] Failover was called with an invalid (null or empty) topology.
WriterFailoverHandler.StandaloneNode=[WriterFailoverHandler] [TaskB] Host {} is not yet connected to a cluster. The cluster is still being reconfigured.
WriterFailoverHandler.SuccessfulConnectionInvalidTopology=[WriterFailoverHandler] {} successfully established a connection but doesn't contain a valid topology.
WriterFailoverHandler.SuccessfullyConnectedToNewWriterInstance=[WriterFailoverHandler] Successfully connected to the new writer instance: {}
WriterFailoverHandler.SuccessfullyReconnectedToWriterInstance=[WriterFailoverHandler] Successfully re-connected to the current writer instance: {}
WriterFailoverHandler.TaskAAttemptReconnectToWriterInstance=[WriterFailoverHandler] [TaskA] Attempting to re-connect to the current writer instance: {}
WriterFailoverHandler.TaskAEncounteredException=[WriterFailoverHandler] [TaskA] encountered an exception: {}
WriterFailoverHandler.TaskAFinished=[WriterFailoverHandler] [TaskA] Finished
WriterFailoverHandler.TaskBAttemptConnectionToNewWriter=[WriterFailoverHandler] [TaskB] Trying to connect to a new writer: {}
WriterFailoverHandler.TaskBAttemptConnectionToNewWriterInstance=[WriterFailoverHandler] [TaskB] Attempting to connect to a new writer instance.
WriterFailoverHandler.TaskBConnectedToReader=[WriterFailoverHandler] [TaskB] Connected to reader: {}
WriterFailoverHandler.TaskBEncounteredException=[WriterFailoverHandler] [TaskB] encountered an exception: {}
WriterFailoverHandler.TaskBFailedToConnectToAnyReader=[WriterFailoverHandler] [TaskB] Failed to connect to any reader.
WriterFailoverHandler.TaskBFinished=[WriterFailoverHandler] [TaskB] Finished
