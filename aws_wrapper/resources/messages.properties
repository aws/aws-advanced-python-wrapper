#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


AuroraHostListPlugin.ProviderAlreadySet=[AuroraHostListPlugin]Another dynamic host list provider has already been set: {0}.
AuroraHostListProvider.ClusterInstanceHostPatternNotSupportedForRDSCustom=[AuroraHostListProvider] An RDS Custom url can't be used as the 'clusterInstanceHostPattern' configuration setting.
AuroraHostListProvider.ClusterInstanceHostPatternNotSupportedForRDSProxy=[AuroraHostListProvider] An RDS Proxy url can't be used as the 'clusterInstanceHostPattern' configuration setting.
AuroraHostListProvider.ClusterInstanceHostPatternRequired=[AuroraHostListProvider] The 'clusterInstanceHostPattern' configuration property is required when an IP address or custom domain is used to connect to a cluster that provides topology information. If you would instead like to connect without failover functionality, set the 'enableClusterAwareFailover' configuration property to false.
AuroraHostListProvider.ErrorGettingHostRole=[AuroraHostListProvider] An error occurred while obtaining the connected host's role. This could occur if the connection is broken or if you are not connected to an Aurora database.
AuroraHostListProvider.ErrorGettingNetworkTimeout=[AuroraHostListProvider] An error occurred while getting the connection network timeout: {}
AuroraHostListProvider.ErrorIdentifyConnection=[AuroraHostListProvider] An error occurred while obtaining the connection's host ID.
AuroraHostListProvider.InvalidDialect=[AuroraHostListProvider] The driver expected a dialect that supports topology queries but the detected dialect does not support topology queries.
AuroraHostListProvider.InvalidDialectForGetHostRole=[AuroraHostListProvider] An Aurora dialect is required to analyze a host's role. The detected dialect was '{}'
AuroraHostListProvider.InvalidDialectForIdentifyConnection=[AuroraHostListProvider] An Aurora dialect is required to analyze the instance associated with this connection. The detected dialect was '{}'
AuroraHostListProvider.InvalidPattern=[AuroraHostListProvider] Invalid value for the 'clusterInstanceHostPattern' configuration setting - the host pattern must contain a '?' character as a placeholder for the DB instance identifiers of the instances in the cluster.
AuroraHostListProvider.InvalidQuery=[AuroraHostListProvider] Error obtaining host list. Provided database might not be an Aurora Db cluster
AuroraHostListProvider.InvalidTopology=[AuroraHostListProvider] The topology query returned an invalid topology - no writer instance detected.
AuroraHostListProvider.ParsedListEmpty=[AuroraHostListProvider] Can't parse connection string: '{}'
AuroraHostListProvider.SuggestedClusterId=[AuroraHostListProvider] ClusterId '{}' is suggested for url '{}'.
AuroraHostListProvider.TopologyTimeout=[AuroraHostListProvider] Could not retrieve host list - the topology query timed out. 
AuroraHostListProvider.UninitializedClusterInstanceTemplate=[AuroraHostListProvider] The driver was unable to build a topology object because the cluster instance template was never initialized.
AuroraHostListProvider.UninitializedInitialHostInfo=[AuroraHostListProvider] The driver was unable to build a topology object because the initial host info was never initialized.

DialectCode.InvalidStringValue=[DialectCode] '{}' could not be converted to a DialectCode because it is not a valid DialectCode value. If you are using the 'wrapper_dialect' connection property, please ensure you are setting it to a valid DialectCode value. 

DefaultPlugin.EmptyHosts=[DefaultPlugin] The default connection plugin received an empty host list from the plugin service.
DefaultPlugin.UnknownHosts=[DefaultPlugin] A HostInfo with the role of HostRole.UNKNOWN was requested via get_host_info_by_strategy. The requested role must be either HostRole.WRITER or HostRole.READER.

Dialect.InvalidTargetAttribute=[{}] Could not find a valid target connection attribute for the '{}' method
DialectManager.UnknownDialect=[DialectManager] The database dialect could not be identified. Please use the 'wrapper_dialect' configuration parameter to configure it.
DialectManager.UnknownDialectCode=[DialectManager] Unknown dialect code: '{}'.

DriverConnectionProvider.UnsupportedStrategy=[DriverConnectionProvider] DriverConnectionProvider does not support strategy: {}

HostMonitoringPlugin.ActivatedMonitoring=[HostMonitoringPlugin] Executing method '{}', monitoring is activated.
HostMonitoringPlugin.ClusterEndpointHostInfo=[HostMonitoringPlugin] The HostInfo to monitor is associated with a cluster endpoint. The plugin will attempt to identify the connected database instance.
HostMonitoringPlugin.MonitoringDeactivated=[HostMonitoringPlugin] Monitoring deactivated for method '{}'.
HostMonitoringPlugin.NullConnection=[HostMonitoringPlugin] Attempted to execute method '{}' but the current connection is None.
HostMonitoringPlugin.NullHostInfo=[HostMonitoringPlugin] Attempted to execute method '{}' but the current host info is None.
HostMonitoringPlugin.UnavailableHost=[HostMonitoringPlugin] Host '{}' is unavailable.
HostMonitoringPlugin.ErrorIdentifyingConnection=[HostMonitoringPlugin] An error occurred while identifying the connection database instance: '{}'.
HostMonitoringPlugin.UnableToIdentifyConnection=[HostMonitoringPlugin] Unable to identify the connected database instance: '{}', please ensure the correct host list provider is specified. The host list provider in use is: '{}'.

HostSelector.NoEligibleHost=[HostSelector] No Eligible Hosts Found.

IamPlugin.IsNullOrEmpty=[IamPlugin] Property "{}" is null or empty.

MonitorContext.ExceptionAbortingConnection=[MonitorContext] An exception occurred while attempting to abort the monitored connection: '{}'.
MonitorContext.HostAvailable=[MonitorContext] Host '{}' is *available*.
MonitorContext.HostUnavailable=[MonitorContext] Host '{}' is *unavailable*.
MonitorContext.HostNotResponding=[MonitorContext] Host '{}' is not *responding* - failure count: '{}'.

MonitorService.EmptyAliasSet=[MonitorService] Empty alias set passed for '{}'. The alias set should not be empty.
MonitorService.ErrorPopulatingAliases=[MonitorService] An error occurred while populating aliases: '{}'.
MonitorService.NullDialect=[MonitorService] The host monitoring plugin tried to monitor the connection but was unable to identify the target driver dialect.

Plugin.UnsupportedMethod=[Plugin] '{}' is not supported by this plugin.

PluginManager.InvalidPlugin=[PluginManager] Invalid plugin requested: '{}'.
PluginManager.NullPipeline=[PluginManager] A pipeline was requested but the created pipeline evaluated to None.
PluginManager.ReleaseResources=[PluginManager] Releasing resources.

ConnectionWrapper.ConnectionNotOpen=[ConnectionWrapper] Initial connection isn't open.

Failover.ConnectionChangedError=The active SQL connection has changed due to a connection failure. Please re-configure session state if required.
Failover.EstablishedConnection=Connected to: {}
Failover.InvalidNode=Node is no longer available in the topology: {}
Failover.NoOperationsAfterConnectionClosed=No operations allowed after connection closed.
Failover.ParameterValue={}={}
Failover.StartReaderFailover=Starting reader failover procedure.
Failover.StartWriterFailover=Starting writer failover procedure.
Failover.TransactionResolutionUnknownError=Transaction resolution unknown. Please re-configure session state if required and try restarting the transaction.
Failover.UnableToConnectToReader=Unable to establish SQL connection to the reader instance.
Failover.UnableToConnectToWriter=Unable to establish SQL connection to the writer instance.

PluginServiceImpl.NonEmptyAliases=[PluginServiceImpl] fill_aliases called when HostInfo already contains the following aliases: {}.
PluginServiceImpl.FailedToRetrieveHostPort=[PluginServiceImpl] Could not retrieve Host:Port for connection. {}
PluginServiceImpl.UpdateDialectNullConnection=[PluginServiceImpl] The plugin service attempted to update the current dialect but could not identify a connection to use.
PluginServiceImpl.ReleaseResources=[PluginServiceImpl] Releasing resources.

PropertiesUtils.NoHostDefined=[PropertiesUtils] PropertiesUtils.get_url was called but no host was defined in the properties. Please ensure you pass in a 'host' parameter when connecting.

ReaderFailoverHandler.AttemptingReaderConnection=[ReaderFailoverHandler] Trying to connect to reader: ''{}'', with properties ''{}''
ReaderFailoverHandler.FailedReaderConnection=[ReaderFailoverHandler] Failed to connect to reader: ''{}''
ReaderFailoverHandler.InvalidTopology=[ReaderFailoverHandler] ''{}'' was called with an invalid (null or empty) topology.
ReaderFailoverHandler.SuccessfulReaderConnection=[ReaderFailoverHandler] Connected to reader: ''{}''

UnknownDialect.AbortConnection=[UnknownDialect] abort_connection was called, but the database dialect is unknown. A valid database dialect must be detected in order to abort a connection.

Wrapper.ConnectMethod=[Wrapper] Target driver should be a target driver's connect() method/function.
Wrapper.RequiredTargetDriver=[Wrapper] Target driver is required.

Testing.CantParse=[Testing] Can't parse {}.
Testing.EnvVarRequired=[Testing] Environment variable {} is required.
Testing.InstanceNotFound=[Testing] Instance {} not found.
Testing.ProxyNotFound=[Testing] Proxy for {} is not found.
Testing.RequiredTestDriver=[Testing] testDriver is required.

IamAuthPlugin.UseCachedIamToken=[IamAuthPlugin] Used cached IAM token = {}
IamAuthPlugin.GeneratedNewIamToken=[IamAuthPlugin] Generated new IAM token = {}
IamAuthPlugin.UnhandledException=[IamAuthPlugin] Unhandled exception: {}
IamAuthPlugin.UnsupportedHostname=[IamAuthPlugin] Unsupported AWS hostname {}. Amazon domain name in format *.AWS-Region.rds.amazonaws.com or *.rds.AWS-Region.amazonaws.com.cn is expected.
IamAuthPlugin.InvalidPort=[IamAuthPlugin] Port number: {} is not valid. Port number should be greater than zero. Falling back to default port.
IamAuthPlugin.ConnectException=[IamAuthPlugin] Error occurred while opening a connection: {}

AwsSdk.UnsupportedRegion=[AwsSdk] Unsupported AWS region {}. For supported regions please read https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html

AwsSecretsManagerPlugin.FailedToFetchDbCredentials=[AwsSecretsManagerPlugin] Was not able to either fetch or read the database credentials from AWS Secrets Manager. Ensure the correct secretId and region properties have been provided.
AwsSecretsManagerPlugin.MissingRequiredConfigParameter=[AwsSecretsManagerPlugin] Configuration parameter {} is required.
AwsSecretsManagerPlugin.FailedLogin=[AwsSecretsManagerPlugin] Login failed. Error={}
AwsSecretsManagerPlugin.UnhandledException=[AwsSecretsManagerPlugin] Unhandled exception: {}
AwsSecretsManagerPlugin.ConnectException=[AwsSecretsManagerPlugin] Error occurred while opening a connection: {}

OpenedConnectionTracker.UnableToPopulateOpenedConnectionSet=[OpenedConnectionTracker] The driver is unable to track this opened connection because the instance endpoint is unknown.
OpenedConnectionTracker.InvalidatingConnections=[OpenedConnectionTracker] Invalidating opened connections to host: {}

Dialect.UnknownDialectCode=[Dialect] Unknown dialect code: {}

ConnectionStringHostListProvider.ErrorDoesNotSupportHostRole = [ConnectionStringHostListProvider] ConnectionStringHostListProvider does not support get_host_role
ConnectionStringHostListProvider.ErrorDoesNotSupportIdentifyConnection = [ConnectionStringHostListProvider] ConnectionStringHostListProvider does not support identify_connection. If this method is called and you are using an Aurora database, please ensure you load the 'auroraHostList' plugin to inform the driver that an Aurora cluster is being used.`
